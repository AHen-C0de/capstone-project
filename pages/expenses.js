import styled from "styled-components";
import { Scatter } from "react-chartjs-2";
import { Chart as ChartJS, registerables } from "chart.js/auto";
import "chartjs-adapter-luxon";
import Head from "next/head";

import Header from "../components/Header";
import NavigationBar from "../components/NavigationBar/NavigationBar";
//import ContentWrapper from "../components/ContentWrapper";
import { getAllExpenses } from "../services/expensesService";

export async function getServerSideProps() {
  const expenses = await getAllExpenses();
  return {
    props: { expenses: expenses },
  };
}

export default function Expenses({ expenses }) {
  const data = expenses.map((expense) => ({
    x: new Date(expense.date),
    y: expense.amount,
  }));

  const sortedData = data.sort(
    (dataPointPre, dataPointPost) =>
      Number(dataPointPre.x) - Number(dataPointPost.x)
  );

  const plotOptions = {
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: false,
          text: "| € |",
          font: {
            size: 22,
            family: "Inter",
          },
        },
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 20,
          },
          stepSize: 20,
          callback: function (value) {
            return `${value} €`;
          },
        },
      },
      x: {
        type: "time",
        time: {
          // Luxon format string
          //tooltipFormat: "DD MM",
        },
        title: {
          display: false,
        },
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 20,
          },
          maxTicksLimit: 5,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
    },
    maintainAspectRatio: false,
  };

  const plotData = {
    datasets: [
      {
        data: data,
        backgroundColor: "rgba(11, 158, 91, 0.5)",
        borderColor: "#0B7D54",
        borderWidth: 2,
        showLine: true,
      },
    ],
  };

  function handleSubmit(event) {
    event.preventDefault();
    const form = event.target;

    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    console.log(data);
    form.reset();
  }

  return (
    <>
      <Head>
        <title>Ausgaben</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header>Ausgaben</Header>
      <main>
        <ContentWrapper>
          <GraphWrapper>
            <Scatter options={plotOptions} data={plotData} />
          </GraphWrapper>
          <form onSubmit={handleSubmit}>
            <label htmlFor="amount">Ausgaben hinzufügen</label>
            <input
              type="number"
              min={0.01}
              max={500}
              step={0.01}
              name="amount"
              id="amount"
              required
            />
            <label htmlFor="date">Datum</label>
            <input
              type="date"
              min="2022-01-01"
              max="2099-12-12"
              name="date"
              id="name"
              required
            />
            <button type="submit">Hinzufügen</button>
          </form>
        </ContentWrapper>
      </main>
      <NavigationBar />
    </>
  );
}

const ContentWrapper = styled.div`
  padding: 3rem 1.5rem 3rem 1.5rem;
  height: 100%;
`;

const GraphWrapper = styled.div`
  height: 40vh;
`;
