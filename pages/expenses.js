import styled from "styled-components";
import { useState, useEffect } from "react";
import { Scatter } from "react-chartjs-2";
import { Chart as ChartJS, registerables } from "chart.js/auto";
import "chartjs-adapter-luxon";
import Head from "next/head";

import Header from "../components/Header";
import NavigationBar from "../components/NavigationBar/NavigationBar";
import MoneyAddIcon from "../components/icons/MoneyAddIcon";
import CloseButton from "../components/buttons/CloseButton";
import { getAllExpenses } from "../services/expensesService";

export async function getServerSideProps() {
  const expenses = await getAllExpenses();
  return {
    props: { DBexpenses: expenses },
  };
}

export default function Expenses({ DBexpenses }) {
  const [expenses, setExpenses] = useState(DBexpenses);
  const [chartData, setChartData] = useState({});
  const [isShowForm, setShowForm] = useState(false);

  useEffect(() => {
    const preparedData = prepareChartData();
    setChartData(preparedData);
  }, [expenses]);

  function prepareChartData() {
    const data = expenses.map((expense) => ({
      x: new Date(expense.date),
      y: expense.amount,
    }));

    const sortedData = data.sort(
      (dataPointPre, dataPointPost) => dataPointPre.x - dataPointPost.x
    );

    return {
      datasets: [
        {
          data: data,
          backgroundColor: "rgba(11, 158, 91, 0.5)",
          borderColor: "#0B7D54",
          borderWidth: 2,
          showLine: true,
        },
      ],
    };
  }

  const chartOptions = {
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: false,
          text: "| € |",
          font: {
            size: 22,
            family: "Inter",
          },
        },
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 20,
          },
          stepSize: 20,
          callback: function (value) {
            return `${value} €`;
          },
        },
      },
      x: {
        type: "time",
        time: {
          // Luxon format string
          //tooltipFormat: "DD MM",
        },
        title: {
          display: false,
        },
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 20,
          },
          maxTicksLimit: 5,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
    },
    maintainAspectRatio: false,
  };

  async function handleSubmit(event) {
    event.preventDefault();
    const form = event.target;

    const formData = new FormData(form);
    const data = Object.fromEntries(formData);

    const response = await fetch("api/expenses", {
      method: "POST",
      body: JSON.stringify(data),
    });
    const responseObj = await response.json();

    setExpenses((previousExpenses) => [
      ...previousExpenses,
      responseObj.createdExpense,
    ]);
    form.reset();
  }

  function toggleShowForm() {
    setShowForm((previousIsShowForm) => !previousIsShowForm);
  }

  return (
    <>
      <Head>
        <title>Ausgaben</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header>Ausgaben</Header>
      <main>
        <ContentWrapper>
          <GraphWrapper>
            {Object.keys(chartData).length !== 0 && (
              <Scatter options={chartOptions} data={chartData} />
            )}
          </GraphWrapper>
          {!isShowForm ? (
            <button
              aria-label={isShowForm ? "hide form" : "show form"}
              onClick={toggleShowForm}
            >
              <MoneyAddIcon
                width={30}
                height={30}
                fillColor={"var(--background-secondary)"}
              />
            </button>
          ) : (
            <>
              <CloseButton onClose={toggleShowForm} />
              <StyledForm onSubmit={handleSubmit}>
                <StyledLabel htmlFor="amount">Ausgaben hinzufügen</StyledLabel>
                <StyledInput
                  type="number"
                  min={0.01}
                  max={500}
                  step={0.01}
                  name="amount"
                  id="amount"
                  placeholder="0.00 €"
                  required
                />
                <StyledLabel htmlFor="date">Datum</StyledLabel>
                <StyledInput
                  type="date"
                  min="2022-01-01"
                  max="2099-12-12"
                  name="date"
                  id="name"
                  required
                />
                <button type="submit">Hinzufügen</button>
              </StyledForm>
            </>
          )}
        </ContentWrapper>
      </main>
      <NavigationBar />
    </>
  );
}

const ContentWrapper = styled.div`
  padding: 3rem 1.5rem 3rem 1.5rem;
  height: 100%;
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const GraphWrapper = styled.div`
  height: 40vh;
`;

const StyledForm = styled.form`
  display: flex;
  flex-direction: column;
  background-color: var(--list-secondary);
  padding: 1rem;
  border-radius: 1rem;
`;

const StyledLabel = styled.label`
  font-family: "Lily Script One";
`;

const StyledInput = styled.input`
  padding: 0.5rem;
  border-radius: 2rem;
`;
